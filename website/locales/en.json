{
  "site_description": "A simple and lightweight way to integrate internationalization on a small website project.",
  "good_morning": "Good morning",
  "text": "This is an example.",
  "fallback_text": "Cette phrase n'est pas disponible en anglais.",
  "current_lang": "Current language",
  "all_lang": "All available languages",
  "license": "MIT License",
  "nested": {
    "one": "There is one monkey in the tree.",
    "more": "There are %{0} monkeys in the tree."
  },
  "options": {
    "cols_title": {
      "method": "Method",
      "methods": "Methods",
      "tableOfContent": "Table of content",
      "argument": "Argument",
      "default_value": "Default value",
      "description": "Description",
      "default_options": "Default options"
    },
    "params": {
      "locales": "Object containing your language translations. <b class='required'>Required only if </b><a href='#prop-path'><code>path</code></a> is not defined.",
      "path": "Absolute access path to the directory containing your translation files. The files will be loaded automatically according to the active language (the fallback language will always be loaded). Priority over the <a href='#prop-locales'><code>locales</code></a> option. <b class='required'>Required only if</b> <a href='#prop-locales'><code>locales</code></a> is not defined. e.g.: <code>./locales</code>.",
      "availableLocales": "List containing the names of available languages as defined in the translation files. <b class='required'>Required only if </b><a href='#prop-path'><code>path</code></a> is defined.",
      "lang": "Active language to use. Don't use it if you want to let the browser's language detector provide the language. If this option is not set, the <code>fallbackLang</code> option becomes required.",
      "fallbackLang": "Fallback language. The language to use when the requested language or a requested string in a non-fully translated language is missing. If not set, the fallback language will be the current one.",
      "activeClass": "Class to add to the active button for the current language. Use only if <a href='#prop-togglersSelector'><code>togglersSelector</code></a> is used.",
      "togglersSelector": "CSS selector for toggler elements. si18n.js will add a click event to selected items. Do not set this option if you are using the <code>setLocale(lang)</code> method. These elements must <b class='required'>compulsorily</b> have the attribute <code>data-lang=\"XX\"</code> where XX corresponds to the language code of the button (toggler element) to be detected.",
      "isTogglerSelect": "Whether the toggler is a <code>select</code> or <code>button</code> element (or whatever).",
      "saveLang": "Whether to save the language in the localStorage.",
      "saveAs": "Name of the key to save the language in the localStorage. If set, the value will be used as key to retrieve the language from the URL parameter (Default: <code>lang</code>).",
      "reloadPage": "If this option is set to <code>true</code>, the page will automatically refresh after changing the language. It may only be useful if you have a complex page structure and want the translations to be loaded every time you change the language, to keep it simple.",
      "translate": "<b class='required'>(required)</b> - Function that translates text manually. For translation use only.<br><b>Note:</b> The <code>html</code> tag automatically has a <code>lang</code> attribute with the current language, no need to encode it manually.",
      "onChange": "Callback function triggered when the language changes. Everything you want to do else because the language has changed, do it here."
    },
    "methods": {
      "constructor": "Does the same thing as the following <code>init</code> method.",
      "init": "<code class='recommanded'>Recommanded</code> - Initializes the si18n object with the given <a href='#options'>options</a>.",
      "setLocale": "Sets the given language and applies the change by calling the <code>translate</code> option method. Don't use this method if have configured the <code>togglersSelector</code> option.",
      "getLocale": "Returns the current language code (e.g.: 'en').",
      "getLocales": "Returns the list of all available languages (e.g.: <code>['fr', 'en', 'it']</code>).",
      "t": "Returns the translation string at the given key (e.g.: <code>heroTitle</code>, <code>site.title</code>, <code>site.menu.link1</code>).<br>The <code>values</code> argument is optional. If provided, it must contain the key-values to be replaced. See the <a href='#values-replacement'>example</a> below.",
      "getJSON": "Retrieves and returns the data from the given URL in JSON format in the callback function parameter.",
      "toJSON": "Returns the options of the instance."
    },
    "others": {
      "valuesReplacement": "Replacement of values",
      "valuesReplacementDesc": "Besides doing simple text replacements, si18n.js can also insert values into placeholders for that purpose. Just define a key-value in the argument <code>values</code> (second argument) of the method <a href='#fn-t'><code>t</code></a>. And in your texts, all you have to do is reserve the spaces with a <code>%{X}</code> where X is the key (number or property name) of the value to insert. Example:"
    }
  },
  "main": {
    "bugReport": "Bugs or suggestions for improvements? Create an issue ${0}."
  },
  "autoDetect": {
    "autoDetection": "Automatic detection",
    "autoDetectionDesc": "This allows si18n.js to automatically detect and update the text for the element:",
    "autoSetLangAndDir": "The <code>lang</code> and <code>dir</code> attributes of the <code>html</code> tag are set automatically. The only thing you can do for the <code>dir</code> attribute is to set it manually for all languages or only for <code>rtl</code> (boolean) languages. Default: <code>ltr</code>. e.g.: <code>\"rtl\": true</code>.",
    "noContent": "Not for tag content",
    "noContentDesc": "When there is the <code>data-si18n-default</code> attribute, and it is set to <code>false</code>, the text will not be set as the content of the tag. You should use this option only for attribute content.",
    "cdnDesc": "You can also use si18n.js from a CDN. There are different versions of links available for different CDN platforms. You can pick and use only one link at once.",
    "attrDescTitle": "All attributes are:",
    "attrDesc": "<li><code>data-si18n-default</code>: If set to <code>false</code>, the text will not be placed in the tag. (Reserved for attributes.)</li><li><code>data-si18n-html</code>: If set to <code>true</code>, text will be added as HTML code. Default: <code>false</code>.</li><li><code>data-si18n-value</code> for the <code>value</code> attribute of a tag like <code>option</code> and <code>input</code>.</li><li><code>data-si18n-title</code> for the <code>title</code> attribute of the tag.</li><li><code>data-si18n-label</code> for the <code>label</code> attribute of a tag like <code>optgroup</code>.</li><li><code>data-si18n-aria-label</code> for the <code>aria-label</code> attribute of the tag.</li><li><code>data-si18n-placeholder</code> for the <code>placeholder</code> attribute of the <code>input</code> tag.</li><li><code>data-si18n-content</code> for the attribute <code>content</code> of a tag like <code>meta</code> for the description of the page, for example (useful if you use <code>Prerendering</code> technology.</li>"
  },
  "utils": {
    "start": "Get started",
    "demo": "Demo",
    "installation": "Installation",
    "usage": "Usage",
    "viewOnGithub": "View source on GitHub",
    "basicExample": "Basic example",
    "copy": "Copy",
    "values": "values",
    "or": "or",
    "changelog": "Changelog",
    "itLangNotAvailable": "Italian: Not available"
  }
}
