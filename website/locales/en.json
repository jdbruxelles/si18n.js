{
  "site_description": "A simple and lightweight way to integrate internationalization on a small web site project.",
  "good_morning": "Good morning",
  "text": "This is an example.",
  "fallback_text": "Cette phrase n'est pas disponible en anglais.",
  "current_lang": "Current language",
  "all_lang": "All available languages",
  "license": "MIT License",
  "nested": {
    "one": "There is one monkey in the tree.",
    "more": "There are %{0} monkeys in the tree."
  },
  "options": {
    "cols_title": {
      "method": "Method",
      "methods": "Methods",
      "tableOfContent": "Table of content",
      "argument": "Argument",
      "default_value": "Default value",
      "description": "Description",
      "default_options": "Default options"
    },
    "params": {
      "locales": "<b class='jdb-text-red'>(required)</b> - Object containing your local translations.",
      "lang": "Active language to use. Don't use it if you want to use the language detector. If not set, the <code>fallback</code> option become required.",
      "fallbackLang": "Fallback language. The language to use when the requested language or a requested string in a non-fully translated language is missing. If not set, the fallback language will be the current one.",
      "activeClass": "Class to add to the active button for the current language. Use only if <a href='#prop-togglersSelector'><code>togglersSelector</code></a> is used.",
      "togglersSelector": "CSS selector to the togglers elements. si18n.js will add a click event to the selected elements. Do not set if you use the <code>setLocale(lang)</code> method. These elements <strong>must</strong> have the attribute <code>data-lang=\"XX\"</code> where XX is the language code of the button (toggle element) to be detected.",
      "isTogglerSelect": "Whether the toggler is a <code>select</code> or <code>button</code> element.",
      "saveLang": "Whether to save the language in the localStorage.",
      "saveAs": "Name of the key to save the language in the localStorage. If set, the value will be used as key to retrieve the language from the URL parameter (Default: <code>lang</code>).",
      "translate": "<b class='jdb-text-red'>(required)</b> - Function that translate the text manually. Reserved only for translation.<br><b>Note:</b> The html tag automatically got a lang attribute with the current language, no need to code it manually.",
      "onChange": "Callback function triggered when the language change. Whathever you want to do."
    },
    "methods": {
      "constructor": "Does the same thing as the following <code>init</code> method.",
      "init": "<code class='jdb-text-green'>Recommanded</code> - Initializes the si18n object with the given <a href='#options'>options</a>.",
      "setLocale": "Sets the given language and applies the change by calling the <code>translate</code> option method. Don't use this method if have configured the <code>togglersSelector</code> option.",
      "getLocale": "Returns the current language code (e.g.: 'en').",
      "getLocales": "Returns the list of all available languages (e.g.: <code>['fr', 'en', 'it']</code>).",
      "t": "Returns the translation string at the given key (e.g.: <code>heroTitle</code>, <code>site.title</code>, <code>site.menu.link1</code>).<br>The <code>values</code> argument is optional. If provided, it must contain the key-values to be replaced. See the <a href='#values-replacement'>example</a> below.",
      "toJSON": "Returns the options of the instance."
    },
    "others": {
      "valuesReplacement": "Replacement of values",
      "valuesReplacementDesc": "In addition to doing simple text replacement, si18n.js can also insert values in spaces reserved for this purpose. Just define a key-value in the argument <code>values</code> (second argument) of the method <a href='#fn-t'><code>t</code></a>. And in your texts, it will suffice to reserve the spaces with a <code>%{X}</code> where X is the key (number or property name) of the value to insert. Example:"
    }
  },
  "main": {
    "bugReport": "Bugs or suggestions for improvements? Create an issue ${0}."
  },
  "autoDetect": {
    "autoDetection": "Automatic detection",
    "autoDetectionDesc": "This allows si18n.js to automatically detect and update the text for the element:",
    "autoSetLangAndDir": "The <code>lang</code> and <code>dir</code> attribute of the <code>html</code> tag are set automatically. The only thing you can do for the <code>dir</code> attribute is to set it manually for all languages or only for <code>rtl</code> languages. DefaultÂ : <code>ltr</code>.",
    "noContent": "Not for tag content",
    "noContentDesc": "When there is the <code>data-si18n-default</code> attribute, the text will not be set as the content of the tag. You must use this option for only attributes content.",
    "attrDescTitle": "All attributes are:",
    "attrDesc": "<li><code>data-si18n-default</code></li><li><code>data-si18n-html</code>: if set to <code>true</code>, the content will be added as HTML code. Default: <code>false</code></li><li><code>data-si18n-value</code> for the <code>value</code> attribute of a tag like <code>option</code> and <code>input</code>.</li><li><code>data-si18n-title</code> for the <code>title</code> attribute of the tag.</li><li><code>data-si18n-label</code> for the <code>aria-label</code> attribute.</li>"
  },
  "utils": {
    "start": "Get started",
    "demo": "Demo",
    "installation": "Installation",
    "usage": "Usage",
    "viewOnGithub": "View source on GitHub",
    "basicExample": "Basic example",
    "copy": "Copy",
    "values": "values",
    "or": "or"
  },
  "language": {
    "fr": "French",
    "en": "English",
    "it": "Italian"
  }
}
